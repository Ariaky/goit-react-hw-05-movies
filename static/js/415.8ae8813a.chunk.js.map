{"version":3,"file":"static/js/415.8ae8813a.chunk.js","mappings":"gOAGaA,GAAaC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAYE,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,2HASzBC,EAAMJ,EAAAA,GAAAA,IAAUK,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,8CAKhBG,EAAQN,EAAAA,GAAAA,GAASO,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,6BAIjBK,EAASR,EAAAA,GAAAA,IAAUS,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,8HAQnBO,EAAcV,EAAAA,GAAAA,KAAWW,IAAAA,GAAAR,EAAAA,EAAAA,GAAA,uE,SCtBzBS,EAAY,SAAHC,GAEf,IAADC,EAAAD,EADJE,KAAQC,EAAEF,EAAFE,GAAIC,EAAKH,EAALG,MAAOC,EAAWJ,EAAXI,YAAaC,EAAYL,EAAZK,aAAcC,EAAYN,EAAZM,aAExCC,GAAWC,EAAAA,EAAAA,MACXC,EAAc,IAAIC,KAAKL,GAE7B,OACEM,EAAAA,EAAAA,MAAC1B,EAAU,CAAC2B,GAAE,WAAAC,OAAaX,GAAMY,MAAO,CAAEC,KAAMR,GAAWS,SAAA,CACxDZ,GACCa,EAAAA,EAAAA,KAAC3B,EAAG,CAAC4B,IAAG,GAAAL,OAZM,uCAYYA,OAAGT,GAAee,IAAKhB,EAAOiB,QAAQ,UAEhEH,EAAAA,EAAAA,KAAC3B,EAAG,CAAC4B,IAbG,oDAacC,IAAI,cAAcC,QAAQ,UAElDT,EAAAA,EAAAA,MAACnB,EAAK,CAAAwB,SAAA,CACHb,EAAM,KAAGM,EAAYY,cAAc,QAEtCV,EAAAA,EAAAA,MAACjB,EAAM,CAAAsB,SAAA,EACLC,EAAAA,EAAAA,KAACK,EAAAA,EAAW,CACVC,OAAQjB,EACRkB,cAAe,GACfC,eAAe,UACfC,cAAc,OACdC,YAAY,SAEdV,EAAAA,EAAAA,KAACrB,EAAW,CAAAoB,SAAEV,EAAasB,QAAQ,UAI3C,ECnBE,EAdgB,SAAH7B,GAAyB,IAAnB8B,EAAI9B,EAAJ8B,KAAW9B,EAALe,MACvB,OACIG,EAAAA,EAAAA,KAAAa,EAAAA,SAAA,CAAAd,UACIC,EAAAA,EAAAA,KAAA,MAAAD,SACKa,EAAKE,KAAI,SAAAC,GAAK,OACff,EAAAA,EAAAA,KAAA,MAAAD,UACIC,EAAAA,EAAAA,KAACnB,EAAS,CAACG,KAAM+B,KADZA,EAAM9B,GAEV,OAKnB,C,kHCeF,UAtBa,WACX,IAAA+B,GAA0BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/BI,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GAEhB5B,GAAWC,EAAAA,EAAAA,MAWjB,OARA+B,EAAAA,EAAAA,YAAU,WAC0B,SAAAC,IAGjC,OAHiCA,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAlC,SAAAC,IAAA,IAAAC,EAAA,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,GACyBC,EAAAA,EAAAA,MAAc,KAAD,EAA9BJ,EAAQC,EAAAI,KACdX,EAASM,GAAU,wBAAAC,EAAAK,OAAA,GAAAP,EAAA,MACpBQ,MAAA,KAAAC,UAAA,EAJc,WACmBZ,EAAAW,MAAC,KAADC,UAAA,CAIlCC,EACF,GAAG,KAGD1C,EAAAA,EAAAA,MAAAmB,EAAAA,SAAA,CAAAd,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,oBACJC,EAAAA,EAAAA,KAACqC,EAAAA,EAAS,CAACzB,KAAMQ,EAAOvB,MAAO,CAAEC,KAAMR,OAG7C,C","sources":["components/MovieCard/MovieCard.styled.js","components/MovieCard/MovieCard.jsx","components/MoviesList/MoviesList.jsx","pages/Home.jsx"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const StyledLink = styled(Link)`\n  height: 100%;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  gap: 15px;\n`;\n\nexport const Img = styled.img`\nheight: 500px;\nobject-fit: cover;\n`;\n\nexport const Title = styled.h3`\n  margin: 0 15px;\n`;\n\nexport const Rating = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  align-items: center;\n  margin: 0 15px;\n`;\n\nexport const RatingValue = styled.span`\n  display: block;\n  line-height: 2px;\n  font-weight: 500;\n`;","import { useLocation } from \"react-router-dom\";\nimport StarRatings from \"react-star-ratings\";\nimport { Img, Rating, RatingValue, StyledLink, Title } from \"./MovieCard.styled\";\n\nconst BASIC_IMG_URL = 'https://image.tmdb.org/t/p/original';\nconst defaultImg = `https://via.placeholder.com/200x300?text=No+Image`;\n\nexport const MovieCard = ({\n  info: { id, title, poster_path, release_date, vote_average },\n}) => {\n  const location = useLocation();\n  const releaseDate = new Date(release_date);\n\n  return (\n    <StyledLink to={`/movies/${id}`} state={{ from: location }}>\n      {poster_path ? (\n        <Img src={`${BASIC_IMG_URL}${poster_path}`} alt={title} loading=\"lazy\" />\n      ) : (\n        <Img src={defaultImg} alt=\"placeholder\" loading=\"lazy\" />\n      )}\n      <Title>\n        {title} ({releaseDate.getFullYear()})\n      </Title>\n      <Rating>\n        <StarRatings\n          rating={vote_average}\n          numberOfStars={10}\n          starRatedColor=\"#ffc414\"\n          starDimension=\"19px\"\n          starSpacing=\"1px\"\n        />\n        <RatingValue>{vote_average.toFixed(1)}</RatingValue>\n      </Rating>\n    </StyledLink>\n  );\n};","import { MovieCard } from 'components/MovieCard/MovieCard'; \n\nconst MovieList = ({ list, state }) => {\n    return (\n        <>\n            <ul>\n                {list.map(movie => (\n                <li key={movie.id}>\n                    <MovieCard info={movie} />\n                </li>\n                ))}\n            </ul>\n        </>\n    );\n  };\n\n  export default MovieList;\n\n            /*<ul>\n                {list.map(({ title, id }) => (\n                <li key={id}>\n                    <Link key={id} to={`/movies/${id}`} state={state}>\n                    {title}\n                    </Link>\n                </li>\n                ))}\n            </ul>\n            */","import MovieList from 'components/MoviesList/MoviesList';\n\nimport { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { fetchMovies } from 'services/api';\n\n\nconst Home = () => {\n  const [films, setFilms] = useState([]);\n\n  const location = useLocation();\n  // console.log(location);\n\n  useEffect(() => {\n    async function fetchTrendingMovies() {\n      const filmList = await fetchMovies();\n      setFilms(filmList);\n    }\n    fetchTrendingMovies();\n  }, []);\n\n  return (\n    <>\n      <h1>Trending today</h1>\n      <MovieList list={films} state={{ from: location }} />\n    </>\n  );\n};\n\nexport default Home;"],"names":["StyledLink","styled","Link","_templateObject","_taggedTemplateLiteral","Img","_templateObject2","Title","_templateObject3","Rating","_templateObject4","RatingValue","_templateObject5","MovieCard","_ref","_ref$info","info","id","title","poster_path","release_date","vote_average","location","useLocation","releaseDate","Date","_jsxs","to","concat","state","from","children","_jsx","src","alt","loading","getFullYear","StarRatings","rating","numberOfStars","starRatedColor","starDimension","starSpacing","toFixed","list","_Fragment","map","movie","_useState","useState","_useState2","_slicedToArray","films","setFilms","useEffect","_fetchTrendingMovies","_asyncToGenerator","_regeneratorRuntime","_callee","filmList","_context","prev","next","fetchMovies","sent","stop","apply","arguments","fetchTrendingMovies","MovieList"],"sourceRoot":""}