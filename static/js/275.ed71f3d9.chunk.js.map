{"version":3,"file":"static/js/275.ed71f3d9.chunk.js","mappings":"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","sources":["components/MovieCard/MovieCard.styled.js","components/MovieCard/MovieCard.jsx","components/MoviesList/MoviesList.jsx","components/Searchbar/Searchbar.jsx","pages/Movies.jsx"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const StyledLink = styled(Link)`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n\n`;\n\nexport const Img = styled.img`\n    height: auto;\n    object-fit: cover;\n    margin-bottom: 10px;\n    \n`;\n\nexport const Title = styled.h3`\n  margin-bottom: 10px;\n`;\n\nexport const Rating = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 10px;\n`;\n\nexport const RatingValue = styled.span`\n  display: block;\n  line-height: 2px;\n  font-weight: 500;\n`;","import { useLocation } from \"react-router-dom\";\nimport StarRatings from \"react-star-ratings\";\nimport { Img, Rating, RatingValue, StyledLink, Title } from \"./MovieCard.styled\";\n\nconst BASIC_IMG_URL = 'https://image.tmdb.org/t/p/original';\nconst defaultImg = `https://via.placeholder.com/200x300?text=No+Image`;\n\nexport const MovieCard = ({\n  info: { id, title, poster_path, release_date, vote_average },\n}) => {\n  const location = useLocation();\n  const releaseDate = new Date(release_date);\n\n  return (\n    <StyledLink to={`/movies/${id}`} state={{ from: location }}>\n      {poster_path ? (\n        <Img src={`${BASIC_IMG_URL}${poster_path}`} alt={title} loading=\"lazy\" />\n      ) : (\n        <Img src={defaultImg} alt=\"placeholder\" loading=\"lazy\" />\n      )}\n      <Title>\n        {title} ({releaseDate.getFullYear()})\n      </Title>\n      <Rating>\n        <StarRatings\n          rating={vote_average}\n          numberOfStars={10}\n          starRatedColor=\"#ffc414\"\n          starDimension=\"19px\"\n          starSpacing=\"1px\"\n        />\n        <RatingValue>{vote_average.toFixed(1)}</RatingValue>\n      </Rating>\n    </StyledLink>\n  );\n};","import { MovieCard } from 'components/MovieCard/MovieCard'; \n\nconst MovieList = ({ list, state }) => {\n    return (\n        <>\n            <ul>\n                {list.map(movie => (\n                <li key={movie.id}>\n                    <MovieCard info={movie} />\n                </li>\n                ))}\n            </ul>\n        </>\n    );\n  };\n\n  export default MovieList;\n\n            /*<ul>\n                {list.map(({ title, id }) => (\n                <li key={id}>\n                    <Link key={id} to={`/movies/${id}`} state={state}>\n                    {title}\n                    </Link>\n                </li>\n                ))}\n            </ul>\n            */","const Searchbar = ({ setSearchParams, fetchMoviesFromApi }) => {\n    const handleSubmit = async e => {\n      e.preventDefault();\n      const searchForm = e.currentTarget;\n      const searchQuery = searchForm.elements.query.value;\n      setSearchParams({ query: searchQuery });\n      searchForm.reset();\n      fetchMoviesFromApi(searchQuery);\n    };\n  \n    return (\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" name=\"query\" />\n        <button type=\"submit\">Search</button>\n      </form>\n    );\n  };\n  \n  export default Searchbar;","import Searchbar from '../components/Searchbar/Searchbar';\nimport MovieList from 'components/MoviesList/MoviesList';\nimport { useSearchParams } from \"react-router-dom\";\nimport { fetchMoviesByQuery } from '../services/api';\nimport { useEffect, useState } from 'react';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query');\n\n  async function fetchMoviesFromApi(searchQuery) {\n    try {\n      const moviesFounded = await fetchMoviesByQuery(searchQuery);\n      setMovies(moviesFounded);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  useEffect(() => {\n    if (query) fetchMoviesFromApi(query);\n  }, [query]);\n\n  return (\n    <>\n      <Searchbar\n        setSearchParams={setSearchParams}\n        fetchMoviesFromApi={fetchMoviesFromApi}\n      />\n      <MovieList list={movies} />\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["StyledLink","styled","Link","_templateObject","_taggedTemplateLiteral","Img","_templateObject2","Title","_templateObject3","Rating","_templateObject4","RatingValue","_templateObject5","MovieCard","_ref","_ref$info","info","id","title","poster_path","release_date","vote_average","location","useLocation","releaseDate","Date","_jsxs","to","concat","state","from","children","_jsx","src","alt","loading","getFullYear","StarRatings","rating","numberOfStars","starRatedColor","starDimension","starSpacing","toFixed","list","_Fragment","map","movie","setSearchParams","fetchMoviesFromApi","handleSubmit","_ref2","_asyncToGenerator","_regeneratorRuntime","_callee","e","searchForm","searchQuery","_context","prev","next","preventDefault","currentTarget","elements","query","value","reset","stop","_x","apply","arguments","onSubmit","type","name","_useState","useState","_useState2","_slicedToArray","movies","setMovies","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","get","_fetchMoviesFromApi","moviesFounded","fetchMoviesByQuery","sent","t0","console","error","useEffect","Searchbar","MovieList"],"sourceRoot":""}